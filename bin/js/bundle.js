var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
Object.defineProperty(exports, "__esModule", { value: true });
/*
* 游戏初始化配置;
*/
class GameConfig {
    constructor() { }
    static init() {
        var reg = Laya.ClassUtils.regClass;
    }
}
GameConfig.width = 640;
GameConfig.height = 1136;
GameConfig.scaleMode = "fixedwidth";
GameConfig.screenMode = "none";
GameConfig.alignV = "top";
GameConfig.alignH = "left";
GameConfig.startScene = "";
GameConfig.sceneRoot = "";
GameConfig.debug = false;
GameConfig.stat = false;
GameConfig.physicsDebug = false;
GameConfig.exportSceneToJson = true;
exports.default = GameConfig;
GameConfig.init();
},{}],2:[function(require,module,exports){
"use strict";
// Learn TypeScript:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/typescript.html
//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/typescript.html
// Learn Attribute:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/reference/attributes.html
//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - [Chinese] http://docs.cocos.com/creator/manual/zh/scripting/life-cycle-callbacks.html
//  - [English] http://www.cocos2d-x.org/docs/creator/manual/en/scripting/life-cycle-callbacks.html
Object.defineProperty(exports, "__esModule", { value: true });
class LoadingProgressEvenet extends YK.EventData {
    constructor() {
        super(LoadingProgressEvenet.EventID, { Progress: 0, showInfoString: "正在加载..." });
    }
    set Progress(progress) {
        this.data.progress = progress;
    }
    set ShowInfoString(ShowInfoString) {
        this.data.showInfoString = ShowInfoString;
    }
}
LoadingProgressEvenet.EventID = "LoadingProgressEvenet";
exports.default = LoadingProgressEvenet;
},{}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// module netpack
// {
class ProtocolDef {
}
ProtocolDef.ProtocolNames = [
    "test",
    "packbase",
    "UserData",
    "loginReq",
    "loginResp",
    "tickOutEvent",
    "ParamConfig",
    "PrivateRoomInfo",
    "roomIdData",
    "PrivateDeskInfoReply",
    "MatchPlayer",
    "CallOpInfo",
    "OpReq",
    "OpEvent",
    "GameStartEvent",
    "opData",
    "DissRoleRep",
    "DissRoomData",
    "GameOverPlayerData",
    "ParamConfigList",
];
ProtocolDef.Protocols = [
    {
        id: 100,
        request: "test",
        response: "test",
    },
    {
        id: 101,
        request: "test",
        response: "",
    },
    {
        id: 200,
        request: "loginReq",
        response: "loginResp",
    },
    {
        id: 201,
        request: null,
        response: "tickOutEvent",
    },
    {
        id: 401,
        request: "ParamConfigList",
        response: "PrivateDeskInfoReply",
    },
    {
        id: 402,
        request: "roomIdData",
        response: "PrivateDeskInfoReply",
    },
    {
        id: 403,
        request: null,
        response: null,
    },
    {
        id: 404,
        request: null,
        response: "CallOpInfo",
    },
    {
        id: 405,
        request: null,
        response: "GameStartEvent",
    },
    {
        id: 406,
        request: "OpReq",
        response: null,
    },
    {
        id: 407,
        request: null,
        response: "OpEvent",
    },
    {
        id: 408,
        request: "roomIdData",
        response: "opData",
    },
    {
        id: 409,
        request: null,
        response: "DissRoomData",
    },
    {
        id: 410,
        request: null,
        response: "CallOpInfo",
    },
    {
        id: 411,
        request: null,
        response: null,
    },
    {
        id: 412,
        request: null,
        response: null,
    },
    {
        id: 413,
        request: null,
        response: "MatchPlayer",
    },
];
exports.default = ProtocolDef;
class ActionType {
}
ActionType.test = 100;
ActionType.TestUserData = 101;
ActionType.login = 200;
ActionType.tickOutPlayer = 201;
ActionType.CreatePrivRoomReq = 401;
ActionType.LoginPirvRoom = 402;
ActionType.userReady = 403;
ActionType.userReadyEvent = 404;
ActionType.PrivGameStart = 405;
ActionType.PrivOp = 406;
ActionType.PrivOpEvent = 407;
ActionType.userReturn = 408;
ActionType.userDissEvent = 409;
ActionType.userReturnEvent = 410;
ActionType.privGameOverEvent = 411;
ActionType.privGameEndEvent = 412;
ActionType.loginPirvRoomEvent = 413;
exports.ActionType = ActionType;
class ErrorCode {
    static Add(id, msg) {
        ErrorCode.errorDic.set(id, msg);
        return id;
    }
    static Get(id) {
        if (ErrorCode.errorDic.has(id))
            return ErrorCode.Get(id);
        return "未知错误：id=" + id;
    }
}
ErrorCode.errorDic = new Map();
ErrorCode.SystemError = {
    success: ErrorCode.Add(0, "请求成功"),
    unknow: ErrorCode.Add(1, "未知错误"),
    argument: ErrorCode.Add(2, "参数错误"),
    protoNotExists: ErrorCode.Add(3, "不存在此协议"),
    serviceIsStoped: ErrorCode.Add(4, "服务故障"),
    sessionNotExists: ErrorCode.Add(5, "不存在此Session"),
    moduleNotImpl: ErrorCode.Add(6, "此模块未实现"),
    protoNotImpl: ErrorCode.Add(7, "此协议未实现"),
    noLogin: ErrorCode.Add(8, "尚未登录"),
    packHeaderNil: ErrorCode.Add(9, "包头是空的"),
    forward: ErrorCode.Add(10, "重定向"),
    serverMaintenance: ErrorCode.Add(11, "服务器维护"),
    busy: ErrorCode.Add(12, "服务忙"),
    logined: ErrorCode.Add(13, "已登录"),
    dbServerStoped: ErrorCode.Add(14, "数据服务故障"),
    noLoginGame: ErrorCode.Add(15, "未进入游戏"),
    notOnline: ErrorCode.Add(16, "玩家不在线"),
    saveCacheFailed: ErrorCode.Add(17, "写入缓存失败"),
    logoutingGame: ErrorCode.Add(18, "正在退出游戏中"),
    noUseableService: ErrorCode.Add(19, "没有可用的服务"),
    sessionInvalid: ErrorCode.Add(20, "此session是非法的"),
    sessionTimeout: ErrorCode.Add(21, "此session已过期"),
    sessionNoMatch: ErrorCode.Add(22, "会话不匹配"),
    serviceNotImpl: ErrorCode.Add(23, "此服务未实现"),
    functionNotOpen: ErrorCode.Add(24, "此功能尚未开放"),
    serviceIsOpened: ErrorCode.Add(25, "服务已开放"),
    serviceIsClosed: ErrorCode.Add(26, "服务已关闭"),
    serviceIsOffline: ErrorCode.Add(27, "服务已下线"),
    msgTimeOut: ErrorCode.Add(-1, "超时"),
};
ErrorCode.authError = {
    loginAccountFill: ErrorCode.Add(1001, "账号或者密码错误"),
    accountExist: ErrorCode.Add(1002, "账号重复"),
    accountAndPwdIsNull: ErrorCode.Add(1003, "账号或者密码不能为空"),
    roleIdNoExist: ErrorCode.Add(1004, "无效的用户id或者token无效"),
};
exports.ErrorCode = ErrorCode;
// }
},{}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class RoleMode extends YK.IMode {
    constructor() {
        super(...arguments);
        this.accountInfo = { userid: 0, token: "" };
    }
    OnInitData(param) {
        this.eventMgr.setNetCallback(this.OnNetEvenet, 99);
        this.eventMgr.addNetEvent(200);
    }
    OnClear() {
    }
    OnDestroy() {
        super.OnDestroy();
    }
    OnNetEvenet(ev) {
        if (ev.Data.head.errorcode == 0) {
            if (ev.Data.head.cmd == 200) {
                this.OnLoginResp(ev.Data.msg);
            }
        }
    }
    SendHttpLogin(account, pwd, callBack) {
        YK.NetMgr.Instance.SendGet("modeName=account&api=login&account=" + account + "&pwd=" + pwd, new YK.Func(this, (res) => {
            if (res != null && res.errorcode == 0) {
                this.accountInfo.token = res.data.token;
                this.accountInfo.userid = res.data.userid;
            }
            if (callBack != null) {
                callBack.Invoke(res);
            }
        }));
    }
    /**
     * 发送登陆
     * @param userid 用户id
     * @param token 账号token
     */
    SendLogin() {
        let sendData = { token: this.accountInfo.token, roleid: this.accountInfo.userid };
        YK.NetMgr.Instance.Send(200, sendData);
    }
    /**
     * 登陆返回
     * @param loginResp 登陆的返回信息
     */
    OnLoginResp(loginResp) {
        this.roleInfo = loginResp.roleinfo;
    }
}
exports.default = RoleMode;
},{}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const ProtocolDef_1 = require("../Defs/ProtocolDef");
var SceneBase = YK.SceneBase;
const LoginScene_1 = require("./LoginScene");
const WaitWind_1 = require("../Winds/WaitWind");
const LoadingWind_1 = require("../Winds/LoadingWind");
const EventDef_1 = require("../Defs/EventDef");
class LoadingScene extends SceneBase {
    OnInit(param) {
        super.OnInit(param);
        this.needLoadRes.add("res/source/Loading_atlas_vckm32.jpg", Laya.Loader.IMAGE, true)
            .add("res/source/Loading_atlas0.png", Laya.Loader.IMAGE, true)
            .add("res/source/Loading.bin", Laya.Loader.BUFFER, true, true);
        this.initNeedLoadTask = new YK.LoadGruopInfo();
        this.initNeedLoadTask.add("res/external/BasePack_atlas0.png", Laya.Loader.IMAGE, true)
            .add("res/external/BasePack.bin", Laya.Loader.BUFFER, true, true)
            .onItemCompletion(this.loadItemCompletion, this)
            .onCompletion(this.loadGameResFinish, this);
    }
    loadItemCompletion() {
        console.log(this.initNeedLoadTask.Progress);
        let ev = new EventDef_1.default();
        ev.Progress = this.initNeedLoadTask.Progress;
        YK.UIMgr.Instance.DispatchEvent(ev);
    }
    /**
     * 资源加载完成
     */
    loadGameResFinish() {
        fairygui.UIObjectFactory.setPackageItemExtension(fairygui.UIConfig.globalModalWaiting, WaitWind_1.default);
        this.AddProto();
        ProtocolDef_1.default.Protocols.forEach(element => {
            YK.ProtoMap.AddProto(element);
        });
    }
    AddProto() {
        YK.NetMgr.Instance.AddProto("netpack", ProtocolDef_1.default.ProtocolNames);
        this.StartGame();
    }
    StartGame() {
        let ev = new EventDef_1.default();
        ev.Progress = 100;
        YK.UIMgr.Instance.DispatchEvent(ev);
        YK.SceneMgr.Instance.GoToScene(LoginScene_1.default);
    }
    OnEnter(param) {
        super.OnEnter(param);
        YK.UIMgr.Instance.ShowWind(LoadingWind_1.default);
        this.initNeedLoadTask.start();
    }
    OnHandler(ev) {
        super.OnHandler(ev);
    }
    OnLeave() {
        super.OnLeave();
    }
    OnDestroy() {
        super.OnDestroy();
    }
    OnLoaded() {
        super.OnLoaded();
    }
    OnTaskFinished() {
        super.OnTaskFinished();
    }
}
exports.default = LoadingScene;
},{"../Defs/EventDef":2,"../Defs/ProtocolDef":3,"../Winds/LoadingWind":8,"../Winds/WaitWind":12,"./LoginScene":6}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var SceneBase = YK.SceneBase;
const LoginWind_1 = require("../Winds/LoginWind");
class LoginScene extends SceneBase {
    constructor() {
        super(...arguments);
        this.firstWind = LoginWind_1.default;
    }
    OnInit(param) {
        super.OnInit(param);
        this.needLoadRes
            .add("res/external/LoginPack.bin", Laya.Loader.BUFFER, true, true)
            .add("res/external/BasePack.bin", Laya.Loader.BUFFER, true, true)
            .add("res/external/BasePack_atlas0.png", Laya.Loader.IMAGE, true);
    }
    OnEnter(param) {
        super.OnEnter(param);
    }
    OnHandler(ev) {
        super.OnHandler(ev);
    }
    OnLeave() {
        super.OnLeave();
    }
    OnDestroy() {
        super.OnDestroy();
    }
    OnLoaded() {
        super.OnLoaded();
    }
    OnTaskFinished() {
        super.OnTaskFinished();
    }
}
exports.default = LoginScene;
},{"../Winds/LoginWind":9}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const MainWind_1 = require("../Winds/MainWind");
class MainScene extends YK.SceneBase {
    constructor() {
        super(...arguments);
        this.firstWind = MainWind_1.default;
    }
    OnInit(param) {
        super.OnInit(param);
        this.needLoadRes.add("res/external/MainPack_atlas0.png", Laya.Loader.IMAGE, true);
        this.needLoadRes.add("res/external/MainPack.bin", Laya.Loader.BUFFER, true, true);
    }
    OnEnter(param) {
        super.OnEnter(param);
    }
    OnHandler(ev) {
        super.OnHandler(ev);
    }
    OnLeave() {
        super.OnLeave();
    }
    OnDestroy() {
        super.OnDestroy();
    }
    OnLoaded() {
        super.OnLoaded();
    }
    OnTaskFinished() {
        super.OnTaskFinished();
    }
}
exports.default = MainScene;
},{"../Winds/MainWind":10}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const EventDef_1 = require("../Defs/EventDef");
class LoadingWind extends YK.BaseUI {
    constructor() {
        super(...arguments);
        this.packName = "Loading";
        this.resName = "loadingWind";
        this.modal = false;
        this.dontDel = true;
        this.btnNameStartsWith = "Btn";
        this.isNeedShowAnimation = false;
        this.isNeedHideAnimation = false;
        this.mProgress = 0;
        this.mShowInfoString = "正在加载...";
    }
    OninitWind() {
        this.mlabelProgress = this.UIObj.get("labelProgress");
        this.mlablMsg = this.UIObj.get("lablMsg");
        this.mlabelProgress.text = "0%";
    }
    OnShowWind() {
        this.eventMgr.addUIEvent(EventDef_1.default.EventID);
        this.mProgress = 0;
        this.mShowInfoString = "正在加载...";
        this.mlabelProgress.text = this.mProgress.toFixed() + "%";
    }
    OnHideWind() {
    }
    OnHandler(ev) {
        switch (ev.cmd) {
            case EventDef_1.default.EventID:
                this.RefreshInfo(ev);
                break;
        }
    }
    RefreshInfo(ev) {
        this.mProgress = ev.data.progress;
        this.mlabelProgress.text = this.mProgress.toFixed() + "%";
    }
}
exports.default = LoadingWind;
},{"../Defs/EventDef":2}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const RoleMode_1 = require("../Modes/RoleMode");
const LoadingWind_1 = require("./LoadingWind");
const MessageBox_1 = require("./MessageBox");
const MainScene_1 = require("../Scenes/MainScene");
class LoginWind extends YK.BaseUI {
    constructor() {
        super(...arguments);
        this.packName = "LoginPack";
        this.resName = "LoginWindow";
        this.modal = false;
        this.dontDel = true;
        this.btnNameStartsWith = "Btn";
        this.isNeedShowAnimation = false;
        this.isNeedHideAnimation = false;
    }
    OninitWind() {
        this.eventMgr.setNetCallback(this.OnNetMsg);
        this.mLabelAcc = this.UIObj.get("LabelAcc");
        this.mLabelPass = this.UIObj.get("LabelPass");
    }
    OnShowWind() {
        YK.UIMgr.Instance.HideWind(LoadingWind_1.default);
        this.eventMgr.addNetEvent(200);
        this.eventMgr.addNetEvent(YK.NetMgrEventDef.onopen);
        this.eventMgr.addNetEvent(YK.NetMgrEventDef.onerror);
        this.eventMgr.addModeEvent(YK.ModeMgr.EventType.SENDINITMSGOK);
    }
    OnHideWind() {
    }
    OnBtnClick(ev) {
        super.OnBtnClick(ev);
        if (ev.name == "BtnLogin") {
            this.HttpLogin();
        }
    }
    HttpLogin() {
        if (this.mLabelAcc.text == "" || this.mLabelPass.text == "") {
            MessageBox_1.default.Create("请输入账号密码").Show();
        }
        else {
            YK.UIMgr.Instance.ShowModalWait();
            YK.ModeMgr.Instance.GetMode(RoleMode_1.default).SendHttpLogin(this.mLabelAcc.text, this.mLabelPass.text, new YK.Func(this, (res) => {
                if (res != null) {
                    if (res.errorcode == 0) {
                        this.ConnectServer();
                    }
                    else {
                        YK.UIMgr.Instance.CloseModalWait();
                        MessageBox_1.default.Create(res.msg).Show();
                    }
                }
                else {
                    YK.UIMgr.Instance.CloseModalWait();
                    MessageBox_1.default.Create("登陆失败尝试重新登陆").Show();
                }
            }));
        }
    }
    ConnectServer() {
        YK.NetMgr.Instance.connect();
    }
    OnConnetServer() {
        YK.ModeMgr.Instance.GetMode(RoleMode_1.default).SendLogin();
    }
    OnLogin(ev) {
        YK.UIMgr.Instance.CloseModalWait();
        if (ev.head.errorcode == 0) {
            YK.UIMgr.Instance.ShowModalWait();
            YK.ModeMgr.Instance.SendInitMsg();
        }
        else {
            MessageBox_1.default.Create(ev.msg).Show();
        }
    }
    OnInitMsged() {
        console.error("开始游戏");
        YK.UIMgr.Instance.CloseModalWait();
        YK.SceneMgr.Instance.GoToScene(MainScene_1.default);
    }
    OnConnetServerError(error) {
        MessageBox_1.default.Create("链接服务器失败，尝试重连")
            .SetBtnConfirmCallBack(new YK.Func(this, () => {
            this.ConnectServer();
        }), "重试")
            .Show();
    }
    OnNetMsg(ev) {
        if (ev.cmd == YK.NetMgrEventDef.onopen) {
            this.OnConnetServer();
        }
        else if (ev.cmd == YK.NetMgrEventDef.onerror
            || ev.cmd == YK.NetMgrEventDef.onclose) {
            this.OnConnetServerError(ev.data);
        }
        else {
            if (ev.Data.head.cmd == 200) {
                this.OnLogin(ev.Data);
            }
        }
    }
    OnHandler(ev) {
        if (ev.cmd == YK.ModeMgr.EventType.SENDINITMSGOK) {
            this.OnInitMsged();
        }
    }
}
exports.default = LoginWind;
},{"../Modes/RoleMode":4,"../Scenes/MainScene":7,"./LoadingWind":8,"./MessageBox":11}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class MainWind extends YK.BaseUI {
    constructor() {
        super(...arguments);
        this.packName = "MainPack";
        this.resName = "MainWindow";
        this.modal = false;
        this.btnNameStartsWith = "Btn";
        this.isNeedShowAnimation = false;
        this.isNeedHideAnimation = false;
    }
    OninitWind() {
    }
    OnShowWind() {
    }
    OnHideWind() {
    }
    OnHandler(ev) {
    }
}
exports.default = MainWind;
},{}],11:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class MessageBox extends YK.BaseUI {
    constructor() {
        super(...arguments);
        this.modal = true;
        this.dontDel = true;
        this.packName = "BasePack";
        this.resName = "MessageBox";
        this.clickBbackgroundClose = false;
        this.mData = null;
    }
    static Create(content) {
        if (this.mMessageBoxDataPools.length > 0) {
            let da = this.mMessageBoxDataPools.pop();
            da.SetContent(content);
            return da;
        }
        return new MessageBoxData(content);
    }
    dispose() {
        super.dispose();
        MessageBox.mMessageBoxDataPools.splice(0, MessageBox.mMessageBoxDataPools.length);
    }
    OnBtnClick(ev) {
        super.OnBtnClick(ev);
        if (ev == this.BtnOK) {
            if (this.mData.BtnOkCallBack != null)
                this.mData.BtnOkCallBack.Invoke();
            this.OnBtnClose();
        }
        else if (ev == this.BtnCancel) {
            if (this.mData.BtnCancelCallBack != null)
                this.mData.BtnCancelCallBack.Invoke();
            this.OnBtnClose();
        }
        else if (ev == this.BtnConfirm) {
            if (this.mData.BtnBtnConfirmCallBack != null)
                this.mData.BtnBtnConfirmCallBack.Invoke();
            this.OnBtnClose();
        }
    }
    OninitWind() {
        this.BtnOK = this.UIObj.get("BtnOK");
        this.BtnCancel = this.UIObj.get("BtnCancel");
        this.BtnConfirm = this.UIObj.get("BtnConfirm");
        this.labelMsg = this.UIObj.get("labelMsg");
    }
    OnShowWind() {
        this.mData = this.data;
        if (this.mData.type == MessageBoxType.None) {
        }
        else if (this.mData.type == MessageBoxType.ShowConfirm) {
            this.BtnConfirm.text = this.mData.labBtnConfirmStr;
        }
        else {
            this.BtnOK.text = this.mData.labBtnOkStr;
            this.BtnCancel.text = this.mData.labBtnCancelStr;
        }
        this.UICtrls.get("stateCtrl").selectedIndex = this.mData.type;
        this.labelMsg.text = this.mData.content;
    }
    OnHideWind() {
        if (this.mData != null) {
            this.mData.reset();
            MessageBox.mMessageBoxDataPools.push(this.mData);
            this.mData = null;
        }
    }
}
MessageBox.mMessageBoxDataPools = new Array();
exports.default = MessageBox;
var MessageBoxType;
(function (MessageBoxType) {
    MessageBoxType[MessageBoxType["None"] = 0] = "None";
    MessageBoxType[MessageBoxType["ShowConfirm"] = 1] = "ShowConfirm";
    MessageBoxType[MessageBoxType["ShowOkAndCancel"] = 2] = "ShowOkAndCancel";
})(MessageBoxType || (MessageBoxType = {}));
class MessageBoxData {
    constructor(content) {
        this.content = null;
        this.BtnOkCallBack = null;
        this.labBtnOkStr = null;
        this.BtnCancelCallBack = null;
        this.labBtnCancelStr = null;
        this.BtnBtnConfirmCallBack = null;
        this.labBtnConfirmStr = null;
        this.content = content;
    }
    get type() {
        let t = MessageBoxType.None;
        if (this.BtnBtnConfirmCallBack != null) {
            t = MessageBoxType.ShowConfirm;
        }
        else if (this.BtnOkCallBack != null || this.BtnCancelCallBack != null) {
            t = MessageBoxType.ShowOkAndCancel;
        }
        return t;
    }
    SetBtnOkAndCancelCallBack(okCallBack, okStr = "好的", cancelCallBack = null, cancelStr = "好的") {
        this.BtnOkCallBack = okCallBack;
        this.labBtnOkStr = okStr;
        this.BtnCancelCallBack = cancelCallBack;
        this.labBtnCancelStr = cancelStr;
        return this;
    }
    SetBtnConfirmCallBack(callBack, labStr = "确定") {
        this.BtnBtnConfirmCallBack = callBack;
        this.labBtnConfirmStr = labStr;
        this.BtnOkCallBack = null;
        this.labBtnOkStr = null;
        this.BtnCancelCallBack = null;
        this.labBtnCancelStr = null;
        return this;
    }
    SetContent(content) {
        this.content = content;
    }
    reset() {
        this.BtnOkCallBack = null;
        this.labBtnOkStr = null;
        this.BtnCancelCallBack = null;
        this.labBtnCancelStr = null;
        this.BtnBtnConfirmCallBack = null;
        this.labBtnConfirmStr = null;
        this.content = null;
    }
    Show() {
        YK.UIMgr.Instance.ShowWind(MessageBox, this);
    }
}
},{}],12:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
class WaitWind extends fairygui.GComponent {
    constructor() {
        super();
    }
    constructFromXML(xml) {
        super.constructFromXML(xml);
        this.displayObject.on(Laya.Event.DISPLAY, this, this.__onShown);
        this.displayObject.on(Laya.Event.UNDISPLAY, this, this.__onHidden);
        this.lablMsg = this.getChild("lablMsg").asTextField;
        this.lablMsg = this.getChild("lablMsg").asTextField;
        this.state = this.getController("c1");
    }
    set text(value) {
        if (value != null) {
            this.lablMsg.text = value;
        }
        else {
            this.lablMsg.text = "";
        }
    }
    __onShown() {
        YK.TimeDelay.Instance.Remove(this.ShownLoadingRing, this);
        YK.TimeDelay.Instance.Remove(this.TimeOut, this);
        YK.TimeDelay.Instance.Add(1, 1, this.ShownLoadingRing, this);
        YK.TimeDelay.Instance.Add(10, 1, this.TimeOut, this);
        this.state.selectedIndex = 1;
    }
    __onHidden() {
        YK.TimeDelay.Instance.Remove(this.ShownLoadingRing, this);
        YK.TimeDelay.Instance.Remove(this.TimeOut, this);
    }
    ShownLoadingRing() {
        this.state.selectedIndex = 0;
    }
    /**
     * 十秒自动关闭
     */
    TimeOut() {
        fairygui.GRoot.inst.closeModalWait();
    }
}
exports.default = WaitWind;
},{}],13:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const GameConfig_1 = require("./GameConfig");
const ProtocolDef_1 = require("./Game/Defs/ProtocolDef");
const RoleMode_1 = require("./Game/Modes/RoleMode");
const LoadingScene_1 = require("./Game/Scenes/LoadingScene");
class Main {
    constructor() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    onVersionLoaded() {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    }
    onConfigLoaded() {
        Laya.stage.addChild(fairygui.GRoot.inst.displayObject);
        fairygui.UIConfig.packageFileExtension = "bin";
        fairygui.UIConfig.bringWindowToFrontOnClick = false;
        //加载IDE指定的场景
        // GameConfig.startScene && Laya.Scene.open(GameConfig.startScene);
        this.initGame();
        // Laya.loader.load([
        //     { url: "res/external/BasePack_atlas0.png", type: Laya.Loader.IMAGE },
        //     { url: "res/external/BasePack.bin", type:Laya. Loader.BUFFER },
        //     { url: "res/source/Loading_atlas_vckm32.jpg", type: Laya.Loader.IMAGE },
        //     { url: "res/source/Loading_atlas0.png", type: Laya.Loader.IMAGE },
        //     { url: "res/source/Loading.bin", type:Laya. Loader.BUFFER },
        //     { url: "res/external/GamePack_atlas0.png", type: Laya.Loader.IMAGE },
        //     { url: "res/external/GamePack.bin", type:Laya. Loader.BUFFER },
        //     { url: "res/external/LoginPack.bin", type:Laya. Loader.BUFFER }
        // ], Laya.Handler.create(this, this.onLoaded));
    }
    //直接fgui测试 是没问题的
    // onLoaded(){
    // 	Laya.stage.addChild(fairygui.GRoot.inst.displayObject);
    // 	fairygui.UIPackage.addPackage("res/external/BasePack");
    // 	fairygui.UIPackage.addPackage("res/source/Loading");
    // 	fairygui.UIPackage.addPackage("res/external/GamePack");
    // 	fairygui.UIPackage.addPackage("res/external/LoginPack");
    // 	let _view = fairygui.UIPackage.createObject("LoginPack", "LoginWindow");
    //     _view.setSize(fairygui.GRoot.inst.width, fairygui.GRoot.inst.height);
    //     fairygui.GRoot.inst.addChild(_view);
    // }
    initGame() {
        fairygui.UIConfig.globalModalWaiting = "ui://Loading/waitWind";
        YK.NetMgr.Instance.AddProto("netpack", ProtocolDef_1.default.ProtocolNames);
        YK.ModeMgr.Instance.AddMode(RoleMode_1.default);
        YK.ModeMgr.Instance.InitData();
        YK.SceneMgr.Instance.GoToScene(LoadingScene_1.default);
    }
}
//激活启动类
new Main();
},{"./Game/Defs/ProtocolDef":3,"./Game/Modes/RoleMode":4,"./Game/Scenes/LoadingScene":5,"./GameConfig":1}]},{},[13])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
